package main

import "fmt"

var (
	a float32 = 23.99
	b float32 = 12.99
	c float32
	d int = 23
	e int = 12
	f int
	s string = "非基本数据类型字符串"
)

func code1() { // 算数运算
	fmt.Printf("%f + %f = %f\n", a, b, a+b)
	fmt.Printf("%f - %f = %f\n", a, b, a-b)
	fmt.Printf("%f x %f = %f\n", a, b, a*b)
	fmt.Printf("%f / %f = %f\n", a, b, a/b)
	// 只有整数型能参与 % 运算
	fmt.Println(d, "%", e, "=", d%e)
}

func code2() { // 赋值运算
	// 表达式的副作用：如果在 fmt.Printf 中直接使用 a += b，它会在打印前修改 a 的值。
	// 这样，打印出来的结果会显示修改后的 a，而不是修改前的值。这种操作可能导致代码的行为不如预期。
	// 表达式的计算顺序：在 fmt.Printf 中直接使用具有副作用的表达式可能会导致代码难以理解和维护。
	// 虽然它是有效的，但通常会使代码更加复杂和难以阅读。
	// 为了确保代码清晰且易于维护，通常建议将副作用从计算和打印逻辑中分离。
	// 可以先计算结果并存储在一个变量中，然后在打印时使用这个变量
	// 保留 a 运算前的值
	c = a
	// 执行加法赋值操作
	a += b
	fmt.Printf("a += b -> a = a + b -> %f = %f + %f\n", a, c, b)
	// 恢复 a 运算前的值
	a = c
	// 执行减法赋值操作
	a -= b
	fmt.Printf("a -= b -> a = a - b -> %f = %f - %f\n", a, c, b)
	// 恢复 a 运算前的值
	a = c
	// 执行乘法赋值操作
	a *= b
	fmt.Printf("a x= b -> a = a x b -> %f = %f x %f\n", a, c, b)
	// 恢复 a 运算前的值
	a = c
	// 执行除法赋值操作
	a /= b
	fmt.Printf("a /= b -> a = a / b -> %f = %f / %f\n", a, c, b)
	// 保留 d 运算前的值
	f = d
	// 执行取模赋值操作
	fmt.Println("d %= e -> d = d % e ->", d%e, "=", f, "%", e)
}

func code3() { // 自加/自减运算
	c = a
	a++
	fmt.Printf("a++ -> a = a + 1 -> %f = %f + 1\n", a, c)
	a = c
	a--
	fmt.Printf("a-- -> a = a - 1 -> %f = %f - 1\n", a, c)
}

func code4() { // 关系运算
	fmt.Printf("%d > %d -> %t\n", d, e, d > e)
	fmt.Printf("%d >= %d -> %t\n", d, e, d >= e)
	fmt.Printf("%d < %d -> %t\n", d, e, d < e)
	fmt.Printf("%d <= %d -> %t\n", d, e, d <= e)
	fmt.Printf("%d == %d -> %t\n", d, e, d == e)
	fmt.Printf("%d != %d -> %t\n", d, e, d != e)
}

func code5() { // 逻辑运算
	// AND
	fmt.Printf("%d >= %d && %d <= %d -> %t && %t -> %t\n", d, e, d, e, d >= e, d <= e, d >= e && d <= e)
	//OR
	fmt.Printf("%d >= %d || %d <= %d -> %t || %t -> %t\n", d, e, d, e, d >= e, d <= e, d >= e || d <= e)
	// NOT
	fmt.Printf("!(%d >= %d) -> %t\n", d, e, !(d >= e))
}

func code6() { // 位运算
	// 初始化变量值
	// 十进制逆推获取二进制思路
	// 取 2 的次幂值尽可能贴近真实值且小于真实值, 用原始值减去 2 的次幂值,直至减为 0
	// 以此类推, 得到所有的次幂, 根据次幂判断 1 的位置
	// 23 -> 23 - 2^4 - 2^2 - 2^1 - 2^0 = 0 得到 64 位二进制表达
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010111
	// 12 -> 12 - 2^3 - 2^2 = 0 得到 64 位二进制表达
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100
	// & 按位与运算, 当二进制同等位值都为 1 得到的值为 1 否则为 0
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010111
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100
	// 二进制推算十进制 2^2 = 4
	fmt.Printf("%d & %d -> %d\n", d, e, d&e)

	// | 按位或运算, 当二进制同等位值都为 0 得到的值为 0 否则为 1
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010111
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011111
	// 2^4 + 2^3 + 2^2 + 2^1 + 2^0 = 31
	fmt.Printf("%d | %d -> %d\n", d, e, d|e)

	// ^ 按位异或运算, 当二进制同等位值不相等时得到的值为 1 否则为 0
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010111
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011011
	// 2^4 + 2^3 + 2^1 + 2^0 = 27
	fmt.Printf("%d ^ %d -> %d\n", d, e, d^e)

	// &^ 按位清除运算, 二进制中清除前者对应后者二进制同等位值为 1 的值并修改为 0
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010111
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010011
	// 2^4 + 2^1 + 2^0 = 19
	fmt.Printf("%d &^ %d -> %d\n", d, e, d&^e)

	// << 左移运算, 二进制位整体向左移位(相当于右边填0)
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010111
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01011100
	// 2^6 + 2^4 + 2^3 + 2^2 = 92
	fmt.Printf("%d << 2 -> %d\n", d, d<<2)

	// >> 右移运算, 二进制位整体向右移位(相当于左边填0)
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000011
	// 2^1 + 2^0 = 3
	fmt.Printf("%d >> 2 -> %d\n", e, e>>2)
}

func code7() { // 负数位运算
	// 初始化变量值
	// 十进制逆推获取二进制思路
	// 取 2 的次幂值尽可能贴近真实值且小于真实值, 用原始值减去 2 的次幂值,直至减为 0
	// 以此类推, 得到所有的次幂, 根据次幂判断 1 的位置
	// 参考 README.md 负数位运算
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101001
	d = -23
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110100
	e = -12
	// & 按位与运算, 当二进制同等位值都为 1 得到的值为 1 否则为 0
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101001
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110100
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11100000  (-32)
	fmt.Printf("%d & %d -> %d\n", d, e, d&e)

	// | 按位或运算, 当二进制同等位值都为 0 得到的值为 0 否则为 1
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101001
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110100
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101  (-3)
	fmt.Printf("%d | %d -> %d\n", d, e, d|e)

	// ^ 按位异或运算, 当二进制同等位值不相等时得到的值为 1 否则为 0
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101001
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011101  (29)
	fmt.Printf("%d ^ %d -> %d\n", d, e, d^e)

	// &^ 按位清除运算, 二进制中清除前者对应后者二进制同等位值为 1 的值并修改为 0
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101001
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110100
	// 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001001  (9)
	fmt.Printf("%d &^ %d -> %d\n", d, e, d&^e)

	// << 左移运算, 二进制位整体向左移位(相当于右边填0)
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101001
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10100100  (-92)
	fmt.Printf("%d << 2 -> %d\n", d, d<<2)

	// >> 右移运算, 二进制位整体向右移位(相当于左边填0，但是负整数则需要填1)
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110100
	// 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101  (-3)
	fmt.Printf("%d >> 2 -> %d\n", e, e>>2)
}

func code8() { // 取址运算
	// &a 获取 a 的内存地址
	fmt.Printf("获取变量 a 内存地址: %f -> %v\n", a, &a)
	fmt.Printf("获取变量 d 内存地址: %d -> %v\n", d, &d)
	fmt.Printf("获取变量 s 内存地址: %s -> %v\n", s, &s)
}

func code9() { // 指针运算

	p := &a // 获取变量 a 的内存地址，并存储在指针 p 中

	fmt.Printf("修改变量 a 之前: *p = %f,%v\n", *p, p) // 输出指针 p 指向的值

	*p = 30.99 // 通过指针 p 修改 a 的值

	fmt.Printf("修改变量 a 之后: *p = %f,%v, a = %f\n", *p, p, a) // 输出修改后的值

	pInt := &d

	fmt.Printf("修改变量 d 之前: *p= %d, %v\n", *pInt, pInt)

	*pInt = 30 // 通过指针 pInt 修改 a 的值
	fmt.Printf("修改变量 d 之后: *p= %d, %v, d=%d\n", *pInt, pInt, d)

	pStr := &s
	fmt.Printf("修改变量 s 之前: %s,%v \n", *pStr, pStr)

	*pStr = "修改了非基本数据字符串"
	fmt.Printf("修改变量 s 之后：%s,%v, s=%s", *pStr, pStr, s)

}

func main() {
	// 算数运算
	code1()
	fmt.Println("*************************************")
	// 赋值运算
	code2()
	fmt.Println("*************************************")
	// 自加/自减运算
	code3()
	fmt.Println("*************************************")
	// 关系运算
	code4()
	fmt.Println("*************************************")
	// 逻辑运算
	code5()
	fmt.Println("*************************************")
	// 位运算
	code6()
	fmt.Println("*************************************")
	// 负数位运算
	code7()
	fmt.Println("*************************************")
	// 取址运算
	code8()
	fmt.Println("*************************************")
	// 指针运算
	code9()
}
